# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code,
# and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

# workflow의 제목
name: Node.js CI

# Event 설정
on:
  # push를 할 경우
  push:
    # branches 가 main 인 경우 workflow 동작
    branches: [ "main" ]
  # pull_request를 받을 경우도 마찬가지로 설정해주었다.
  pull_request:
    branches: [ "main" ]

# workflow가 동작할 행위를 설정해준다.
# jobs를 설정해주는 것
jobs:
  # job1, 즉 이름이 build이다.
  build:
    # runs-on: 해당 job을 어떤 OS에서 실행할 것인지 설정해준다.
    # ubuntu 버전은 Github action 설명서를 보고 참고하자.
    runs-on: ubuntu-latest

    # 다양한 작업 구성 행렬 전략을 사용한다.
    strategy:
      # matrix를 사용하여 다양한 작업 구성 행렬을 정의한다.
      matrix:
        # 배열을 사용해, 노드 버전 구성 행렬을 정의한다.
        node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    # 단계 정의
    steps:
      # action 정의
      # checkout@v3: Repo에 있는 Code를 Runner로 가져온다.
      - uses: actions/checkout@v3
      # 이름 정의해주기
      - name: Use Node.js ${{ matrix.node-version }}
      # node 설치하기
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn' # yarn 패키지 매니저를 사용할 경우 'yarn'으로 설정
      # Yarn Cache 설정 및 패키지 설치
      - name: Yarn Install
        run: |
          yarn config set cache-folder .yarn-cache
          yarn install

      # S3로 보낼 압축 파일 생성
      - name: zip file
        run: zip -r CI.zip ./src/* ./prisma/* ./package.json ./yarn.lock ./appspec.yml

      # AWS 인증하기
      - name: AWS configure credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # 엑세스 키 입력
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # 엑세스 시크릿 키 입력
          aws-secret-access-key: ${{ secrets.AWS_PRIVATE_ACCESS_KEY }}
          # 지역 설정: 서울
          aws-region: ap-northeast-2

      # S3로 업로드하기
      - name: upload to S3
        run: aws s3 cp --region ap-northeast-2 ./CI.zip s3://my-git-cicd/deploy/

      # codeDeploy 실행
      - name: deploy with AWS codeDeploy
        run: |
          aws deploy create-deployment --application-name cicd_codedeploy-app --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name my_codedeploy-deployment-group --s3-location bucket=my-git-cicd,bundleType=zip,key=deploy/CI.zip
